#version: 0.2
#run-as: root
#
#
#phases:
#  pre_build:
#    commands:
#      - echo Logging in to Amazon ECR...
#      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
#      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
##      - docker pull $REPOSITORY_URI
#  build:
#    commands:
#      - echo pulling image for ECR
#      - docker pull $REPOSITORY_URI
#      - echo Build started on `date`
#      - echo Building the Docker image...
#      - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
#      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
#  post_build:
#    commands:
#      - echo Build completed on `date`
#      - echo Pushing the Docker image...
#      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
#      - echo Writing image definitions file...
#      - printf '[{"name":"%s","imageUri":"%s"}]' $CONTAINER_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
#artifacts:
#  files: imagedefinitions.json



#version: 0.2
#run-as: root
#
#phases:
#  pre_build:
#    commands:
#      - echo Logging in to Amazon ECR...
#      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
#      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
#      - echo "Checking for existing Docker image locally..."
#      - if [[ "$(docker images -q $REPOSITORY_URI 2> /dev/null)" == "" ]]; then docker pull $REPOSITORY_URI; fi
#
#  build:
#    commands:
#      - echo Build started on `date`
#      - echo Building the Docker image...
#      - docker build --cache-from=$REPOSITORY_URI -t $IMAGE_REPO_NAME:$IMAGE_TAG .
#      - if [ $? -ne 0 ]; then echo "Docker build failed!" && exit 1; fi
#      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
#
#  post_build:
#    commands:
#      - echo Build completed on `date`
#      - echo Pushing the Docker image...
#      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
#      - echo Writing image definitions file...
#      - printf '[{"name":"%s","imageUri":"%s"}]' $CONTAINER_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
#
#artifacts:
#  files: imagedefinitions.json

#version: 0.2
#run-as: root
#
#phases:
#  pre_build:
#    commands:
#      - echo Logging in to Amazon ECR...
#      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
#      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
#      - echo "Checking for existing Docker image locally..."
#      - if [[ "$(docker images -q $REPOSITORY_URI 2> /dev/null)" == "" ]]; then docker pull $REPOSITORY_URI || echo "No existing image found in ECR."; fi
#
#  build:
#    commands:
#      - echo Build started on `date`
#      - echo Building the Docker image...
##      - docker build --cache-from=$REPOSITORY_URI -t $IMAGE_REPO_NAME:$IMAGE_TAG $IMAGE_REPO_NAME
#      - docker build -t $IMAGE_REPO_NAME $IMAGE_REPO_NAME
#      - if [ $? -ne 0 ]; then echo "Docker build failed!" && exit 1; fi
#      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
#
#  post_build:
#    commands:
#      - echo Build completed on `date`
#      - echo Pushing the Docker image...
#      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
##      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:latest
#      - echo Writing image definitions file...
#      - printf '[{"name":"%s","imageUri":"%s"}]' $CONTAINER_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
#      - echo Cleaning up unused Docker images...
#      - docker system prune -f
#
#artifacts:
#  files: imagedefinitions.json


#version: 0.2
#run-as: root
#
#phases:
#  pre_build:
#    commands:
#      - echo Logging in to Amazon ECR...
#      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
#      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
#      - echo "Checking for existing Docker image locally..."
#      - docker pull $REPOSITORY_URI || echo "No cache image found, proceeding without cache."
#
#  build:
#    commands:
#      - echo Debugging build environment...
##      - echo "Current directory: $(pwd)"
#      - echo "Files in the directory:"
#      - ls -la
#      - echo "Attempting to build Docker image..."
##      - docker build --cache-from=$REPOSITORY_URI -t $IMAGE_REPO_NAME:$IMAGE_TAG . || (echo "Docker build failed!" && exit 1)
#      - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
#
#  post_build:
#    commands:
#      - echo Build completed on `date`
#      - echo Pushing the Docker image...
#      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
#      - echo Writing image definitions file...
#      - printf '[{"name":"%s","imageUri":"%s"}]' $CONTAINER_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
#
#artifacts:
#  files: imagedefinitions.json


version: 0.2
run-as: root

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
      - echo Checking if ECR image exists...
      - aws ecr describe-images --repository-name $IMAGE_REPO_NAME --image-ids imageTag=$IMAGE_TAG --region $AWS_DEFAULT_REGION
      - BASE_IMAGE="$REPOSITORY_URI:$IMAGE_TAG";
#      - if [[ $? -eq 0 ]]; then
#        echo "ECR image found. Using ECR image. $REPOSITORY_URI:$IMAGE_TAG"
#        BASE_IMAGE="$REPOSITORY_URI:$IMAGE_TAG";
#        else
#        echo "ECR image not found. Using Docker Hub image."
#        BASE_IMAGE="$DOCKER_HUB_IMAGE:$DOCKER_IMAGE_TAG";
#        fi
  build:
    commands:
      - echo Building the Docker image...
      - echo "Base Image is $BASE_IMAGE"
      - docker build --build-arg BASE_IMAGE=$BASE_IMAGE -t $IMAGE_REPO_NAME:$IMAGE_TAG .
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $REPOSITORY_URI:$IMAGE_TAG
  post_build:
    commands:
      - echo Pushing the Docker image...
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - printf '[{"name":"%s","imageUri":"%s"}]' $CONTAINER_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
artifacts:
  files:
    - imagedefinitions.json
